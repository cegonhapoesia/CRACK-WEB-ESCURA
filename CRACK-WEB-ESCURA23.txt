# CRAKER WB ECURA - EXTRATOR UNIVERSAL + MANUTEN√á√ÉO AVAN√áADA

Add-Type -AssemblyName "System.Windows.Forms"

function Mostrar-Menu {
    Clear-Host
    Write-Host "==============================================="
    Write-Host " üîé EXTRATOR UNIVERSAL DE HTML + SISTEMA"
    Write-Host "==============================================="
    Write-Host "1. Extrair JSONs v√°lidos de arquivos HTML"
    Write-Host "2. Extrair blocos JSON n√£o validados"
    Write-Host "3. Procurar termos (nomes, emails, etc)"
    Write-Host "4. Extrair dados comuns (nomes, datas, imagens)"
    Write-Host "6. Pesquisa profunda no Bing"
    Write-Host "7. Abrir nova janela PowerShell"
    Write-Host "12. üõ†Ô∏è Menu de Manuten√ß√£o do Sistema"
    Write-Host "13. üåê Abrir navegador Tor"
    Write-Host "14. üí¨ Abrir ChatGPT em nova aba"
    Write-Host "8. Sair"
    Write-Host "-----------------------------------------------"
}

function Mostrar-Menu-Manutencao {
    Clear-Host
    Write-Host "======================================="
    Write-Host " üõ†Ô∏è MENU DE MANUTEN√á√ÉO DO SISTEMA"
    Write-Host "======================================="
    Write-Host "1. Reparar Windows (SFC / DISM)"
    Write-Host "2. Ativar e verificar com Windows Defender"
    Write-Host "3. Verificar atualiza√ß√µes do Windows"
    Write-Host "4. Criar novo script PowerShell personalizado"
    Write-Host "5. Voltar ao menu principal"
    Write-Host "---------------------------------------"
}

function Escolher-Pasta {
    $dialog = New-Object System.Windows.Forms.FolderBrowserDialog
    $dialog.Description = "Selecione a pasta com os arquivos HTML"
    if ($dialog.ShowDialog() -eq 'OK') {
        return $dialog.SelectedPath
    } else {
        Write-Host "‚ùå Nenhuma pasta selecionada." -ForegroundColor Red
        return $null
    }
}

function Extrair-JSON-Valido {
    $pasta = Escolher-Pasta
    if (-not $pasta) { return }
    $saida = "$env:USERPROFILE\Documents"
    $arquivos = Get-ChildItem $pasta -Filter *.html
    if (-not $arquivos) { Write-Host "‚ö†Ô∏è Nenhum arquivo HTML encontrado."; Pause; return }
    $cont = 1
    foreach ($f in $arquivos) {
        $html = Get-Content $f.FullName -Raw
        $regex = '(?s)(\{(?:[^{}]|(?<o>\{)|(?<-o>\}))*\}(?(o)(?!)))|(\[(?:[^\[\]]|(?<o>\[)|(?<-o>\]))*\](?(o)(?!)))'
        $matches = [regex]::Matches($html, $regex)
        foreach ($m in $matches) {
            try {
                $json = $m.Value.Trim() | ConvertFrom-Json -ErrorAction Stop
                $m.Value | Out-File "$saida\json_valido_$cont.txt"
                Write-Host "‚úÖ JSON v√°lido salvo: json_valido_$cont.txt"
                $cont++
            } catch {}
        }
    }
    Pause
}

function Extrair-JSON-Possivel {
    $pasta = Escolher-Pasta
    if (-not $pasta) { return }
    $saida = "$env:USERPROFILE\Documents"
    $arquivos = Get-ChildItem $pasta -Filter *.html
    if (-not $arquivos) { Write-Host "‚ö†Ô∏è Nenhum arquivo HTML encontrado."; Pause; return }
    $cont = 1
    foreach ($f in $arquivos) {
        $html = Get-Content $f.FullName -Raw
        $regex = '(?s)(\{(?:[^{}]|(?<o>\{)|(?<-o>\}))*\}(?(o)(?!)))|(\[(?:[^\[\]]|(?<o>\[)|(?<-o>\]))*\](?(o)(?!)))'
        $matches = [regex]::Matches($html, $regex)
        foreach ($m in $matches) {
            $m.Value | Out-File "$saida\json_possivel_$cont.txt"
            Write-Host "üíæ JSON poss√≠vel salvo: json_possivel_$cont.txt"
            $cont++
        }
    }
    Pause
}

function Procurar-Dados {
    $pasta = Escolher-Pasta
    if (-not $pasta) { return }
    $termo = Read-Host "üîç Termo a procurar"
    foreach ($f in Get-ChildItem $pasta -Filter *.html) {
        $html = Get-Content $f.FullName -Raw
        $matches = Select-String -InputObject $html -Pattern $termo -AllMatches
        if ($matches) {
            Write-Host "`nüü¢ Resultados em $($f.Name):"
            $matches | ForEach-Object { $_.Line }
        }
    }
    Pause
}

function Extrair-Dados-Comuns {
    $pasta = Escolher-Pasta
    if (-not $pasta) { return }
    $saida = "$env:USERPROFILE\Documents\dados_extraidos.txt"
    Remove-Item $saida -ErrorAction SilentlyContinue
    $padroes = @{
        "üë§ Nome" = '"name"\s*:\s*"([^"]+)"'
        "üìß Email" = '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,7}\b'
        "üñºÔ∏è Imagem" = 'https?://[^"]+\.(jpg|jpeg|png|gif)'
        "üìÖ Data" = '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
        "üîó Link" = 'https?://[^\s"]+'
        "üìû Telefone" = '\(?\d{2,3}\)?[\s.-]?\d{4,5}[\s.-]?\d{4}'
    }
    foreach ($f in Get-ChildItem $pasta -Filter *.html) {
        $html = Get-Content $f.FullName -Raw
        Add-Content $saida "===== $($f.Name) ====="
        foreach ($chave in $padroes.Keys) {
            $matches = [regex]::Matches($html, $padroes[$chave])
            foreach ($m in $matches) {
                Add-Content $saida "$chave: $($m.Groups[1].Value -replace '\s+', '')"
            }
        }
        Add-Content $saida "`n"
    }
    Write-Host "`n‚úÖ Dados salvos em: $saida"
    Pause
}

# FUNCIONALIDADES ADICIONAIS

function Pesquisa-Funda-Bing {
    $q = Read-Host "üîé Pesquisa no Bing"
    Start-Process "https://www.bing.com/search?q=$([uri]::EscapeDataString($q))"
    Pause
}

function Nova-Janela-PowerShell {
    Start-Process powershell -ArgumentList "-NoExit"
    Pause
}

function Reparar-Windows {
    Start-Process powershell -Verb runAs -ArgumentList {
        sfc /scannow
        Dism /Online /Cleanup-Image /ScanHealth
        Dism /Online /Cleanup-Image /RestoreHealth
        Pause
    }
}

function Ativar-WindowsDefender {
    Start-Process powershell -Verb runAs -ArgumentList {
        Set-MpPreference -DisableRealtimeMonitoring $false
        Start-MpScan -ScanType FullScan
        Pause
    }
}

function Verificar-Atualizacoes {
    Start-Process powershell -Verb runAs -ArgumentList {
        UsoClient StartScan
        UsoClient StartDownload
        UsoClient StartInstall
        Pause
    }
}

function Adicionar-ScriptPersonalizado {
    $nome = Read-Host "üìÑ Nome do script"
    $codigo = Read-Host "‚úçÔ∏è C√≥digo do script (uma linha)"
    $caminho = "$env:USERPROFILE\Documents\$nome.ps1"
    $codigo | Out-File -FilePath $caminho -Encoding UTF8
    Write-Host "‚úÖ Script criado: $caminho"
    Pause
}

function Abrir-Tor {
    $tor = "C:\Program Files\Tor Browser\Browser\firefox.exe"
    if (Test-Path $tor) {
        Start-Process $tor
    } else {
        Write-Host "‚ùå Tor Browser n√£o encontrado." -ForegroundColor Red
    }
    Pause
}

function Abrir-ChatGPT {
    Start-Process "https://chat.openai.com"
    Pause
}

# LOOP PRINCIPAL

while ($true) {
    Mostrar-Menu
    $escolha = Read-Host "`nüëâ Escolha uma op√ß√£o (1-14)"
    switch ($escolha) {
        "1" { Extrair-JSON-Valido }
        "2" { Extrair-JSON-Possivel }
        "3" { Procurar-Dados }
        "4" { Extrair-Dados-Comuns }
        "6" { Pesquisa-Funda-Bing }
        "7" { Nova-Janela-PowerShell }
        "8" { Write-Host "`nüëã A sair..."; break }
        "12" {
            while ($true) {
                Mostrar-Menu-Manutencao
                $sub = Read-Host "`nüõ†Ô∏è Op√ß√£o manuten√ß√£o (1-5)"
                switch ($sub) {
                    "1" { Reparar-Windows }
                    "2" { Ativar-WindowsDefender }
                    "3" { Verificar-Atualizacoes }
                    "4" { Adicionar-ScriptPersonalizado }
                    "5" { break }
                    default { Write-Host "‚ùå Op√ß√£o inv√°lida." -ForegroundColor Red; Pause }
                }
            }
        }
        "13" { Abrir-Tor }
        "14" { Abrir-ChatGPT }
        default { Write-Host "‚ùå Op√ß√£o inv√°lida." -ForegroundColor Red; Pause }
    }
}
